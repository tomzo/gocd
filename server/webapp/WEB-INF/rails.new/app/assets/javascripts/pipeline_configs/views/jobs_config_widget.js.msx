/*
 * Copyright 2015 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus', 'jquery',
  '../helpers/form_helper', '../helpers/tooltips', '../helpers/mithril_component_mixins',
  'pipeline_configs/models/resources',
  './environment_variables_config_widget', './tasks_config_widget', './artifacts_config_widget', './properties_config_widget', './tabs_config_widget',
  'jquery.textcomplete'
], function (m, _, s, $,
             f, tt, ComponentMixins,
             Resources,
             EnvironmentVariablesConfigWidget, TasksConfigWidget, ArtifactsConfigWidget, PropertiesConfigWidget, TabsConfigWidget) {

  var autoComplete = function (values, model, attrName) {
    return function (elem, isInitialized) {
      if (!isInitialized) {
        var $inputElem = $($(elem).find("input[data-prop-name='" + attrName + "']"));

        $inputElem.textcomplete([
          {
            words:   values, //the list of auto-completes
            match:   /(^|,)\s*([^,]+)$/,
            index:   2, // use the second match in the regex to extract the search term
            search:  function (term, callback) {
              term = term.toLowerCase();
              callback($.map(this.words, function (word) {
                return word.toLowerCase().indexOf(term) === 0 ? word : null;
              }));
            },
            replace: function (word) {
              return '$1' + word + ', ';
            }
          }
        ]);

        $inputElem.on('textComplete:select', function () {
          model[attrName]($inputElem.val());
        });
      }
    };
  };

  var JobTimeout = {
    view: function (ctrl, args, children) {
      var job       = args.job;
      var radioName = 'radio-' + job.uuid() + '-timeout';
      var errors    = job.validate(), timeoutError;
      if (errors.errors('timeout')) {
        timeoutError = (<small class='error'>{errors.errorsForDisplay('timeout')}</small>)
      }

      return (
        <div>
          <f.row>
            <f.column size={12}>
              <label>
                Timeout
                <f.tooltip tooltip={{
                          content: tt.job.timeout,
                          size: 'small',
                          direction: 'bottom'
                        }}
                           model={job}
                           attrName='timeout'/>
              </label>
            </f.column>
          </f.row>

          <f.row>
            <f.column>
              <input type='radio'
                     name={radioName}
                     id={radioName + '-never'}
                     checked={job.isTimeoutNever()}
                     onchange={job.timeout.bind(job, 'never')}/>
              <label for={radioName + '-never'}>Never</label>
              <input type='radio'
                     name={radioName}
                     id={radioName + '-default'}
                     checked={job.isTimeoutDefault()}
                     onchange={job.timeout.bind(job, null)}/>
              <label for={radioName + '-default'}>Default</label>
            </f.column>
          </f.row>

          <f.row>
            <f.column size={12}>
              <input type='radio'
                     name={radioName}
                     id={radioName + '-custom'}
                     checked={!(job.isTimeoutNever()|| job.isTimeoutDefault())}
                     onchange={job.timeout.bind(job, '')}/>
              <label for={radioName + '-custom'}>
                Cancel after
                <span style={{display: 'inline-table'}}>
                {m.trust('&nbsp')}
                  <input type='number'
                         style={{display: 'inline', width: '60px'}} size={3}
                         oninput={m.withAttr('value', job.timeout)}
                         class={timeoutError ? 'error' : ''}
                         value={(!(job.isTimeoutNever() || job.isTimeoutDefault())) ? job.timeout() : null}/>
                  {m.trust('&nbsp')}
                  minute(s) of inactivity
                  {timeoutError}
                  </span>
              </label>
            </f.column>
          </f.row>
        </div>
      );
    }
  };

  var RunOnAgent = {
    view: function (ctrl, args, children) {
      var job       = args.job;
      window.job    = job;
      var radioName = 'radio-' + job.uuid() + '-runInstanceCount';
      var errors    = job.validate(), runInstanceCounteError;

      if (errors.errors('runInstanceCount')) {
        runInstanceCounteError = (<small class='error'>{errors.errorsForDisplay('runInstanceCount')}</small>)
      }

      return (
        <div>
          <f.row>
            <f.column size={12}>
              <label>
                Number of Jobs
                <f.tooltip tooltip={{
                          content: tt.job.runInstanceCount.main,
                          size: 'small',
                          direction: 'bottom'
                        }}
                           model={job}
                           attrName='runInstanceCount'/>
              </label>
            </f.column>
          </f.row>

          <f.row>
            <f.column size={12}>

              <input type='radio'
                     name={radioName}
                     id={radioName + '-one'}
                     checked={job.isRunOnOneAgent()}
                     onchange={job.runInstanceCount.bind(job, null)}/>
              <label for={radioName + '-one'}>Run on one instance</label>

              <input type='radio'
                     name={radioName}
                     id={radioName + '-all'}
                     checked={job.isRunOnAllAgents()}
                     onchange={job.runInstanceCount.bind(job, 'all')}/>
              <label for={radioName + '-all'}>Run on all agents</label>
            </f.column>
          </f.row>

          <f.row>
            <f.column size={12}>
              <input type='radio'
                     name={radioName}
                     id={radioName + '-custom'}
                     checked={!(job.isRunOnOneAgent() || !job.isRunOnAllAgents())}
                     onchange={job.runInstanceCount.bind(job, '')}/>
              <label for={radioName + '-custom'}>
                Run on
                <span style={{display: 'inline-table'}}>
                  {m.trust('&nbsp')}
                  <input type='number'
                         style={{display: 'inline', width: '60px'}} size={3}
                         value={!(job.isRunOnOneAgent() || job.isRunOnAllAgents()) ? job.runInstanceCount() : null}
                         class={runInstanceCounteError ? 'error' : ''}
                         oninput={m.withAttr('value', job.runInstanceCount)}/>
                  {m.trust('&nbsp')}
                  agents
                  {runInstanceCounteError}
                </span>

              </label>
            </f.column>
          </f.row>
        </div>
      );
    }
  };

  var JobsConfigWidget = {
    controller: function (args) {
      this.args = args;
      this.jobs = args.jobs;
      ComponentMixins.HasViewModel.call(this);
      this.vmState('selectedJobIndex', m.prop(0));

      this.appendJob = function () {
        var newJob = this.jobs().createJob();
        this.vmState('selectedJobIndex')(this.jobs().indexOfJob(newJob));
      };

      this.removeJob = function (job) {
        var previousJob = this.jobs().previousJob(job);
        this.jobs().removeJob(job);

        var firstJob = this.jobs().firstJob() || this.jobs().createJob();
        this.vmState('selectedJobIndex')(this.jobs().indexOfJob(previousJob || firstJob));
      };

      this.vmState('selectedJobIndex')(this.jobs().indexOfJob(this.jobs().firstJob() || this.jobs().createJob()));
    },

    view: function (ctrl) {
      return (
        <div>
          <f.tabs class="job-definitions"
                  tabTitles={ctrl.jobs().collectJobProperty('name')}
                  tabKeys={ctrl.jobs().collectJobProperty('uuid')}
                  isVertical={true}
                  selectedIndex={ctrl.vmState('selectedJobIndex')}>
            {ctrl.jobs().mapJobs(function (job) {
              return (
                <f.row class='job-definition' key={job.uuid()}>
                  <f.column size={9}>
                    <f.removeButton onclick={ctrl.removeJob.bind(ctrl, job)} class='remove-job'/>
                    <f.row>
                      <f.inputWithLabel
                        attrName='name'
                        model={job}/>

                      <f.inputWithLabel
                        config={autoComplete(Resources.list, job, 'resources')}
                        attrName='resources'
                        model={job}
                        tooltip={{
                          content: tt.job.resources,
                          direction: 'bottom',
                          size: 'small'
                        }}
                        end={true}/>
                    </f.row>

                    <f.row>
                      <f.column size={6}>
                        <JobTimeout job={job}/>
                      </f.column>

                      <f.column size={6} end={true}>
                        <RunOnAgent job={job}/>
                      </f.column>
                    </f.row>

                    <f.row>
                      <f.column size={12} end={true}>
                        <EnvironmentVariablesConfigWidget variables={job.environmentVariables}
                                                          key={job.environmentVariables().uuid()}
                                                          vm={ctrl.vmState('environmentVariables')}/>
                      </f.column>
                    </f.row>

                    <f.row>
                      <f.column size={12} end={true}>
                        <TasksConfigWidget tasks={job.tasks}/>
                      </f.column>
                    </f.row>

                    <f.row>
                      <f.column size={12}>
                        <f.tabs tabTitles={['Artifacts', 'Tabs', 'Properties']}
                                tabKeys={['artifacts', 'tabs', 'properties']}
                                selectedIndex={ctrl.vmState('tabSelectedIndex', m.prop(0))}>
                          <ArtifactsConfigWidget artifacts={job.artifacts}
                                                 keys={job.artifacts().uuid()}/>
                          <TabsConfigWidget tabs={job.tabs}
                                            keys={job.tabs().uuid()}/>
                          <PropertiesConfigWidget properties={job.properties}
                                                  keys={job.properties().uuid()}/>
                        </f.tabs>
                      </f.column>
                    </f.row>

                  </f.column>
                </f.row>
              );
            })}
          </f.tabs>
          <f.row>
            <f.column size={2} end={true}>
              <div class='add-job'>
                <a href="javascript:void(0)"
                   onclick={ctrl.appendJob.bind(ctrl)}
                   class='add-job'>Add Job</a>
              </div>
            </f.column>
          </f.row>
        </div>
      );
    }
  };

  return JobsConfigWidget;
});
