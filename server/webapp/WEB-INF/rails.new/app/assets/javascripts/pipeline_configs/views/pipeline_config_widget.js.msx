/*
 * Copyright 2015 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'jquery', 'string-plus', 'lodash',
  '../helpers/form_helper', '../helpers/tooltips', '../helpers/mithril_component_mixins',
  '../models/pipeline', '../models/tasks', './parameters_config_widget',
  './tracking_tool_widget', './environment_variables_config_widget', './pipeline_flow_widget'
], function (m, $, s, _,
             f, tt, ComponentMixins,
             Pipeline, Tasks, ParametersConfigWidget, TrackingToolWidget, EnvironmentVariablesConfigWidget,
             PipelineFlowWidget) {

  var PipelineConfigWidget = function (url, callback) {
    return {
      controller: function () {
        var ctrl              = this;
        this.pipeline         = m.prop();
        this.currentSelection = m.prop();
        this.etag             = m.prop();
        this.url              = url;
        ComponentMixins.HasViewModel.call(this);

        window.pipelineConfigWidget = m.prop(this);

        this.setPipelineAndPreserveSelection = function (newPipeline) {
          var oldPipeline = this.pipeline();
          var newSelection;

          if (oldPipeline) {
            if (ctrl.currentSelection() === oldPipeline.materials()) {
              newSelection = newPipeline.materials();
            } else {
              newSelection = newPipeline.stages().findStage(function (stage) {
                return stage.name() === ctrl.currentSelection().name();
              });
            }
          }

          newSelection = newSelection || newPipeline.stages().firstStage();

          ctrl.pipeline(newPipeline);
          ctrl.currentSelection(newSelection);
        };

        this.savePipeline = function () {
          beforeSend: m.startComputation;
          $.ajax({
            type:       'PATCH',
            url:        url,
            cache:      false,
            headers:    {
              'Accept':       'application/vnd.go.cd.v1+json',
              'Content-Type': "application/json",
              'If-Match':     ctrl.etag()
            },
            data:       JSON.stringify(ctrl.pipeline, s.snakeCaser),
            success:    function (data, status, xhr) {
              var pipeline = Pipeline.fromJSON(data);
              ctrl.etag(xhr.getResponseHeader('ETag'));

              ctrl.setPipelineAndPreserveSelection(pipeline);
            },
            beforeSend: function () {
              m.startComputation();
            },
            complete:   function () {
              m.endComputation();
            }
          });
        };

        $.ajax({
          type:       'GET',
          url:        url,
          cache:      false,
          headers:    {
            'Accept': 'application/vnd.go.cd.v1+json'
          },
          success:    function (data, status, xhr) {
            var pipeline = Pipeline.fromJSON(data);
            ctrl.etag(xhr.getResponseHeader('ETag'));

            ctrl.setPipelineAndPreserveSelection(pipeline);

            if (callback) {
              callback(ctrl);
            }
          },
          beforeSend: function () {
            m.startComputation();
          },
          complete:   function () {
            m.endComputation();
          }
        });
      },

      view: function (ctrl) {
        var pipeline = ctrl.pipeline();

        return (
          <form class='pipeline'>
            <f.row>
              <f.column>
                <h3 class="heading">Pipeline Details for {pipeline.name()}</h3>
              </f.column>
              <f.column>
                <f.link onclick={ctrl.savePipeline.bind(ctrl)} class='save-pipeline'>Save</f.link>
              </f.column>
            </f.row>
            <f.row>
              <f.column end={true} size={12}>
                <fieldset>
                  <f.row>
                    <f.inputWithLabel model={pipeline}
                                      attrName='labelTemplate'
                                      tooltip={{
                                          content: <tt.pipeline.labelTemplate callback={pipeline.labelTemplate}/>,
                                          direction: 'bottom',
                                          size: 'large'
                                        }}
                                      size={4}/>
                  </f.row>

                  <f.row>
                    <f.checkBox model={pipeline}
                                attrName='enablePipelineLocking'
                                tooltip={{
                                          content: tt.pipeline.enablePipelineLocking,
                                          direction: 'bottom'
                                        }}
                                end={true}/>
                  </f.row>

                  <f.row>
                    <f.inputWithLabel model={pipeline.timer()}
                                      attrName='spec'
                                      label='Cron timer specification'
                                      tooltip={{
                                          content: <tt.pipeline.timer.spec callback={pipeline.timer().spec}/>,
                                          direction: 'bottom',
                                          size: 'large'
                                        }}
                                      size={4}
                                      end={true}/>
                  </f.row>
                  <f.row>
                    <f.checkBox model={pipeline.timer()}
                                attrName='onlyOnChanges'
                                label='Run only on new material'
                                disabled={s.isBlank(pipeline.timer().spec())}
                                tooltip={{
                                          content: tt.pipeline.timer.onlyOnChanges,
                                          direction: 'bottom'
                                        }}
                                size={4}
                                end={true}/>
                  </f.row>

                  <f.row>
                    <f.column end={true} size={12}>
                      <TrackingToolWidget trackingTool={pipeline.trackingTool}
                                          vm={ctrl.vmState('trackingTool')}
                                          key={_.result(pipeline.trackingTool(), 'uuid', 'tracking-tool-none')}/>
                      <ParametersConfigWidget parameters={pipeline.parameters}
                                              key={pipeline.parameters().uuid()}
                                              vm={ctrl.vmState('params')}/>
                      <EnvironmentVariablesConfigWidget variables={pipeline.environmentVariables}
                                                        key={pipeline.environmentVariables().uuid()}
                                                        vm={ctrl.vmState('environmentVariables')}/>
                      <PipelineFlowWidget pipeline={ctrl.pipeline}
                                          currentSelection={ctrl.currentSelection}
                                          vm={ctrl.vmState('pipelineFlow')}/>

                    </f.column>
                  </f.row>
                </fieldset>
              </f.column>
            </f.row>
          </form>
        );
      }
    };
  };

  return PipelineConfigWidget;
});

