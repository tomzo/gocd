/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define(['mithril', 'lodash', 'string-plus', '../models/model_mixins', 'foundation.dropdown'], function (m, _, s, Mixin) {

  var deleteKeyAndReturnValue = function (object, key, defaultValue) {
    var value = object[key];
    delete object[key];
    return value || defaultValue;
  };

  var compactClasses = function (args) {
    var initialClasses = [].slice.call(arguments, 1);
    return _([initialClasses, deleteKeyAndReturnValue(args, 'class')]).flatten().compact().join(' ');
  };

  var reflowCalls = {};

  var foundationReflow = function (component) {
    reflowCalls[component] = reflowCalls[component] || _.debounce(function (elem, isInitialized) {
        $(document).foundation(component, 'reflow');
      }, 60);

    return reflowCalls[component];
  };

  var f = {
    row: {
      view: function (ctrl, args, children) {
        var collapse = deleteKeyAndReturnValue(args, 'collapse') ? 'collapse' : null;
        return (
          <div
            class={compactClasses(args, 'row', collapse)}
            {...args}>
            {children}
          </div>
        );
      }
    },

    column: {
      view: function (ctrl, args, children) {
        var end  = deleteKeyAndReturnValue(args, 'end') ? 'end' : null,
            size = deleteKeyAndReturnValue(args, 'size', 6);
        return (
          <div class={compactClasses(args, 'columns', "small-" + size, end)}
            {...args}>
            {children}
          </div>
        );
      }
    },

    input: {
      controller: function () {
        this.onInput = function (model, attrName, callback, e) {
          var currentTarget = (e || event).currentTarget;
          var newValue      = currentTarget.value || currentTarget.getAttribute('value');
          model[attrName](newValue);
          if (callback) {
            callback();
          }
        };
      },

      view: function (ctrl, args) {
        var model       = deleteKeyAndReturnValue(args, 'model'),
            attrName    = deleteKeyAndReturnValue(args, 'attrName'),
            type        = deleteKeyAndReturnValue(args, 'type', 'text'),
            placeholder = deleteKeyAndReturnValue(args, 'placeholder', ''),
            modelType   = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null));

        if (!args.size) {
          args.size = 3;
        }

        var propertyError;

        if (model.validate) {
          var errors = model.validate();
          if (errors.errors(attrName)) {
            propertyError = (<small class='error'>{errors.errorsForDisplay(attrName)}</small>);
          }
        }

        return (
          <f.column {...args}>
            <input
              autocomplete="off"
              autocapitalize="off"
              autocorrect="off"
              spellcheck="off"
              data-prop-name={attrName}
              data-model-type={modelType}
              data-model-uuid={model.uuid()}
              value={model[attrName]()}
              type={type}
              placeholder={placeholder}
              class={propertyError ? 'error' : ''}
              oninput={ctrl.onInput.bind(ctrl, model, attrName, onchange)}/>
            {propertyError}
          </f.column>
        );
      }
    },

    inputWithLabel: {
      controller: function (args) {
        this.onInput = function (model, attrName, callback, e) {
          var currentTarget = (e || event).currentTarget;
          var newValue      = currentTarget.value || currentTarget.getAttribute('value');
          model[attrName](newValue);
          if (callback) {
            callback();
          }
        };
      },

      view: function (ctrl, args) {
        var model       = deleteKeyAndReturnValue(args, 'model'),
            attrName    = deleteKeyAndReturnValue(args, 'attrName'),
            type        = deleteKeyAndReturnValue(args, 'type', 'text'),
            placeholder = deleteKeyAndReturnValue(args, 'placeholder', ''),
            labelText   = deleteKeyAndReturnValue(args, 'label'),
            onchange    = deleteKeyAndReturnValue(args, 'onchange'),
            tooltip     = deleteKeyAndReturnValue(args, 'tooltip'),
            modelType   = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null));

        if (!args.size) {
          args.size = 3;
        }

        var propertyError;
        if (model.validate) {
          var errors = model.validate();
          if (errors.errors(attrName)) {
            propertyError = (<small class='error'>{errors.errorsForDisplay(attrName)}</small>);
          }
        }

        return (
          <f.column {...args} class={propertyError ? 'error' : null}>
            <label class={_.compact([propertyError ? 'error' : null, tooltip ? 'has-tooltip' : null]).join(' ')}>
              {labelText || s.humanize(attrName)}
            </label>

            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>

            <input
              autocomplete="off"
              autocapitalize="off"
              autocorrect="off"
              spellcheck="off"
              data-prop-name={attrName}
              data-model-type={modelType}
              value={model[attrName]()}
              type={type}
              placeholder={placeholder}
              class={propertyError ? 'error' : ''}
              oninput={ctrl.onInput.bind(ctrl, model, attrName, onchange)}/>
            {propertyError}
          </f.column>
        );
      }
    },

    checkBox: {
      view: function (ctrl, args) {
        var model      = deleteKeyAndReturnValue(args, 'model'),
            attrName   = deleteKeyAndReturnValue(args, 'attrName'),
            labelText  = deleteKeyAndReturnValue(args, 'label'),
            disabled   = deleteKeyAndReturnValue(args, 'disabled'),
            tooltip    = deleteKeyAndReturnValue(args, 'tooltip'),
            addPadding = deleteKeyAndReturnValue(args, 'addPadding'),
            id         = s.uuid(),
            modelType  = deleteKeyAndReturnValue(args, 'modelType', (model.constructor ? model.constructor.modelType : null));

        if (!args.size) {
          args.size = 3;
        }

        var padding;

        if (addPadding) {
          padding = (<label style={{display: 'block'}}>{m.trust('&nbsp;')}</label>);
        }

        return (
          <f.column {...args}>
            {padding}
            <input type="checkbox"
                   data-prop-name={attrName}
                   data-model-type={modelType}
                   id={id}
                   disabled={disabled}
                   checked={model[attrName]()}
                   onchange={m.withAttr('checked', model[attrName])}/>
            <label class={_.compact(['inline', tooltip ? 'has-tooltip' : null]).join(' ')} for={id}>
              {labelText || s.humanize(attrName)}
            </label>

            <f.tooltip tooltip={tooltip} model={model} attrName={attrName}/>
          </f.column>
        );
      }
    },

    tabs: {
      controller: function (args) {
        this.selectedIndex = s.coerceToMprop(args.selectedIndex || 0);

        this.classNameForTab = function (tabIndex) {
          return this.selectedIndex() === tabIndex ? 'active' : '';
        };

        this.componentClass = compactClasses(args);

        this.prefixedClass = function (suffix) {
          if (!s.isBlank(this.componentClass)) {
            return this.componentClass + '-' + suffix;
          }
        };
      },

      view: function (ctrl, args, children) {
        var tabs = (
          <ul class={_.compact(['tabs', args.isVertical ? 'vertical': undefined]).join(' ')}>
            {_.map(args.tabTitles, function (tabTitle, tabIndex) {

              var tabTitleElem;

              if (s.isBlank(tabTitle)) {
                tabTitleElem = (<a href='javascript:void(0)'>{m.trust('&nbsp;')}</a>);
              }
              else if (_.isString(tabTitle)) {
                tabTitleElem = (<a href='javascript:void(0)'>{tabTitle}</a>);
              } else {
                tabTitleElem = tabTitle;
              }

              return (
                <li
                  class={_.compact(['tab-title', ctrl.classNameForTab(tabIndex), ctrl.prefixedClass('tab-title')]).join(' ')}
                  onclick={ctrl.selectedIndex.bind(ctrl, tabIndex)}
                  key={args.tabKeys[tabIndex]}>
                  {tabTitleElem}
                </li>
              );
            })}
          </ul>
        );

        var tabsContent = (
          <div
            class={_.compact(['tabs-content', 'tabs-content-container', ctrl.prefixedClass('tabs-content-container')]).join(' ')}>
            {_.map(_.flatten(children), function (child, tabIndex) {

              var renderedChild;

              if (tabIndex === ctrl.selectedIndex()) {
                renderedChild = child;
              }

              return (
                <div
                  class={_.compact(['content', ctrl.classNameForTab(tabIndex), ctrl.prefixedClass('tab-content')]).join(' ')}>
                  {renderedChild}
                </div>
              );
            })}
          </div>
        );

        var tabContainer = (
          <div class={_.compact(['tab-container', ctrl.prefixedClass('tab-container')]).join(' ')}>
            {tabs}
            {tabsContent}
          </div>
        );

        if (args.isVertical) {
          return (
            <f.row class={ctrl.componentClass}>
              <f.column size={12} end={true}>
                {tabContainer}
              </f.column>
            </f.row>
          );
        } else {
          return (
            <div class={ctrl.componentClass}>
              {tabContainer}
            </div>
          );
        }
      }
    },

    select: {
      controller: function (args) {
        this.value = s.coerceToMprop(args.value, '');
      },

      view: function (ctrl, args) {
        var items = deleteKeyAndReturnValue(args, 'items', {}),
            label = deleteKeyAndReturnValue(args, 'label'),
            value = s.coerceToMprop(deleteKeyAndReturnValue(args, 'value'), '');

        if (!args.size) {
          args.size = 3;
        }

        var selectElem = (
          <select value={value()}
                  onchange={m.withAttr('value', value)}>
            {_.map(items, function (text, item) {
              return (
                <option value={item} selected={item === value()}>{text}</option>
              );
            })}
          </select>
        );

        if (s.isBlank(label)) {
          return (<f.column {...args}>{selectElem}</f.column>);
        } else {
          return (
            <f.column {...args}>
              <label>
                {label}
              </label>
              {selectElem}
            </f.column>
          );
        }
      }
    },

    accordion: {
      controller: function (args) {
        this.selectedIndex = Mixin.TogglingGetterSetter(s.coerceToMprop(args.selectedIndex || 0));

        this.classNameForAccordion = function (tabIndex) {
          return this.selectedIndex() === tabIndex ? 'active' : '';
        };
      },

      view: function (ctrl, args, children) {
        return (
          <dl class={compactClasses(args, 'accordion')}>
            {_.map(_.flatten(children), function (child, index) {
              var renderedChild;

              if (index === ctrl.selectedIndex()) {
                renderedChild = child;
              }
              return (
                <dd class={_.compact(['accordion-navigation', ctrl.classNameForAccordion(index)]).join(' ')}
                    key={args.accordionKeys[index]}>
                  <a href="javascript:void(0)"
                     onclick={ctrl.selectedIndex.bind(ctrl, index)}>
                    {args.accordionTitles[index]}
                  </a>

                  <div class={_.compact(['content', ctrl.classNameForAccordion(index)]).join(' ')}>
                    {renderedChild}
                  </div>
                </dd>
              );
            })}
          </dl>
        );
      }
    },

    removeButton: {
      view: function (ctrl, args, children) {
        return (
          <f.link {...args} class={compactClasses(args, 'remove')}>{children}</f.link>
        );
      }
    },

    button: {
      view: function (ctrl, args, children) {
        return (
          <f.link role="button" class={compactClasses(args, 'button')} {...args}>{children}</f.link>
        );
      }
    },

    link: {
      view: function (ctrl, args, children) {
        return (<a href="javascript:void(0)" class={compactClasses(args)} {...args}>{children}</a>);
      }
    },

    tooltip: {
      view: function (ctrl, args, children) {
        if (!args.tooltip && _.isEmpty(children)) {
          return <noscript/>;
        }

        var direction = deleteKeyAndReturnValue(args.tooltip, 'direction', 'bottom'),
            size      = deleteKeyAndReturnValue(args.tooltip, 'size', 'medium'),
            content   = deleteKeyAndReturnValue(args.tooltip, 'content', children),
            tooltipId = 'help-tooltip-';

        if (args.model && args.model.uuid) {
          tooltipId += (args.model.uuid() + '-' + args.attrName);
        } else {
          tooltipId += s.uuid();
        }

        return (
          <span class='tooltip-wrapper' config={foundationReflow('dropdown')}>
            <a href='javascript:void(0)'
               data-dropdown={tooltipId}
               data-options={'is_hover: true; hover_timeout: 400; align: ' + direction}
               class='tooltip-question-mark'/>
            <div id={tooltipId} data-dropdown-content
                 class={_.compact(['f-dropdown', 'content', 'tooltip-content', size]).join(' ')}>
              {content}
            </div>
          </span>
        );
      }
    },

    alert: {
      view: function (ctrl, args, children) {
        return (
          <div>
            <span data-alert class="alert-box secondary">{children}</span>
          </div>
        );
      }
    }
  };

  return f;
});
