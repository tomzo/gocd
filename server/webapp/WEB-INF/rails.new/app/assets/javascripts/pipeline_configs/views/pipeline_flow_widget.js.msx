/*
 * Copyright 2015 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'jquery',
  '../helpers/form_helper', '../helpers/mithril_component_mixins', '../helpers/dragula_config',
  './stages_config_widget'
], function (m, _, $,
             f, ComponentMixins, dragulaConfig,
             StagesConfigWidget) {
  var PipelineFlowWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);

      this.pipeline         = args.pipeline;
      this.currentSelection = args.currentSelection;

      this.appendStage = function () {
        this.currentSelection(this.args.pipeline().stages().createStage());
      };
    },

    view: function (ctrl) {
      var appendStage = (
        <li class='add-stage' onclick={ctrl.appendStage.bind(ctrl)}/>
      );

      var className = function (selection, additionalClasses) {
        return _(['pipeline-flow-box', additionalClasses, (ctrl.currentSelection() === selection) ? 'active' : null]).flatten().compact().value().join(' ');
      };
      
      var dragDropConfig = function (elem, isInitialized) {
        dragulaConfig(elem, isInitialized, function () {
          var reorderedStages = _.map($(elem).find('.stage:not(.gu-mirror)'), function (eachStageElem) {
            return ctrl.pipeline().stages().stageAtIndex($(eachStageElem).attr('data-stage-index'));
          });
          ctrl.pipeline().stages().setStages(reorderedStages);
        });
      };

      return (
        <f.accordion accordionTitles={['Stages']}
                     accordionKeys={['stages']}>
          <div>
            <div class='pipeline-flow-boxes'>
              <div class={className(ctrl.pipeline().materials(), 'materials')}
                   onclick={ctrl.currentSelection.bind(ctrl, ctrl.pipeline().materials())}>
                <div className='label'>Materials</div>
                <div class='bottom-triangle-outer'>
                  <div class='bottom-triangle-inner'></div>
                </div>
              </div>

              <div config={dragDropConfig}>
                {ctrl.pipeline().stages().mapStages(function (stage, stageIndex) {
                  return (
                    <div class={className(stage, 'stage')}
                         data-stage-index={stageIndex}
                         onclick={ctrl.currentSelection.bind(ctrl, stage)}
                         key={stage.uuid()}>
                      <div className='label'>{stage.name()}</div>
                      <div class='bottom-triangle-outer'>
                        <div class='bottom-triangle-inner'></div>
                      </div>
                    </div>
                  );
                })}
              </div>

              {appendStage}
            </div>

            <StagesConfigWidget pipeline={ctrl.pipeline}
                                currentSelection={ctrl.currentSelection}
                                vm={ctrl.vmState('stagesConfig')}/>

          </div>
        </f.accordion>
      );
    }

  };
  return PipelineFlowWidget;
});
